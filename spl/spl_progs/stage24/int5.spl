alias procTable R1;
procTable = PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16);
alias phys R2;
phys = [PTBR + (SP / 512)*2]*512 + (SP % 512);

[procTable + 9] = 2;
[procTable + 13] = SP;
SP = [procTable + 11]*512 - 1;

if([phys - 5] == 2)then
alias prtEntry R3;
prtEntry = 0;
alias res R4;
breakpoint;
//search for pre process resource entry in the process
res = [procTable + 11]*512 + 496;
while(prtEntry < 8)do
	if([res + (prtEntry*2)] == -1)then
		break;
	endif;
	prtEntry = prtEntry + 1;
endwhile;

//if no free entry return -3
if(prtEntry == 8)then
	[phys - 1] = -3;
	[procTable + 9] = 0;
	SP = [procTable + 13];
	ireturn;
endif;

//call open function
multipush(R1, R2, R3, R4);
R1 = OPEN;
R2 = [phys - 4];
call MOD_3;
multipop(R1, R2, R3, R4);

//if open fails
if(R0 == -1)then
	[phys - 1] = -1;
	[procTable + 9] = 0;
	SP = [procTable + 13];
	ireturn;
endif;
if(R0 == -2)then
	[phys - 1] = -2;
	[procTable + 9] = 0;
	SP = [procTable + 13];
	ireturn;
endif;

//set per process table
[res + (prtEntry * 2)] = FILE;
[res + (prtEntry * 2) + 1] = R0;

//return the descriptor and go to the user mode
[phys - 1] = prtEntry;
[procTable + 9] = 0;
SP = [procTable + 13];
breakpoint;
ireturn;
endif;


if([phys - 5] == 3)then

//validating file descriptor
if([phys - 4] < 0 || [phys - 4] > 7)then
	[phys - 1] = -1;
	[procTable + 9] = 0;
	SP = [procTable + 13];
	ireturn;
endif;


alias prtEntry R3;
prtEntry = [phys - 4];
alias res R4;
res = [procTable + 11]*512 + 496;
//check resource identifier
if([res + (prtEntry * 2)] == -1 || [res + (prtEntry * 2)] != FILE)then
	[phys - 1] = -1;
	[procTable + 9] = 0;
	SP = [procTable + 13];
	ireturn;
endif;

//call close function
multipush(R1, R2, R3, R4);
R1 = CLOSE;
R2 = [res + (prtEntry * 2) + 1];
call MOD_3;
multipop(R1, R2, R3, R4);

//invalidate per process resource table entry
[res + (prtEntry * 2)] = -1;


[phys - 1] = 0;
[procTable + 9] = 0;
SP = [procTable + 13];
ireturn;

endif;
