//MOD_0

alias funcNum R1;
alias currPid R2;

//acquire buffer
if(funcNum == ACQUIRE_BUFFER)then
	alias buffnum R2;
	alias pid R3;
	while([BUFFER_TABLE + (buffnum * 4) + 2] != -1)do
		[PROCESS_TABLE + (pid * 16) + 4] = WAIT_BUFFER;
		[PROCESS_TABLE + (pid * 16) + 5] = buffnum;
		multipush(R1, R2, R3);
		call MOD_5;
		multipop(R1, R2, R3);
	endwhile;
	[BUFFER_TABLE + (buffnum * 4) + 2] = pid;
	return;	
endif;

//release buffer
if(funcNum == RELEASE_BUFFER)then
	alias buffnum R2;
	alias pid R3;
	if(pid != [BUFFER_TABLE + (buffnum * 4) + 2])then
		R0 = -1;
		return;
	endif;
	[BUFFER_TABLE + (buffnum * 4) + 2] = -1;
	alias count R4;
	count = 0;
	while(count < 16)do
		alias procTable R5;
		procTable = PROCESS_TABLE + (count * 16);
		if([procTable + 4] == WAIT_BUFFER)then
			if([procTable + 5] == buffnum)then
				[procTable + 4] = READY;
			endif;
		endif;
		count = count + 1;
	endwhile;
	R0 = 0;
	return;
endif;

//acquire inode
if(funcNum == ACQUIRE_INODE)then
	alias iindex R4;
	iindex = R2;
	alias procTable R5;
	procTable = PROCESS_TABLE + (R3 * 16);
	alias fst R6;
	fst = FILE_STATUS_TABLE + (iindex * 4);
	while([fst + 0] != -1)do
		[procTable + 4] = WAIT_FILE;
		[procTable + 5] = iindex;
		multipush(R1, R2, R3, R4, R5, R6);
		call MOD_5;
		multipop(R1, R2, R3, R4, R5, R6);
	endwhile;
	if([INODE_TABLE + (iindex * 16) + 1] == -1)then
		breakpoint;
		R0 = -1;
		return;
	endif;
	[fst + 0] = R3;
	R0 = 0;
	return;
endif;

//release inode
if(funcNum == RELEASE_INODE)then
	alias fst R4;
	fst = FILE_STATUS_TABLE + (R2 * 4);
	if(R3 != [fst + 0])then
		R0 = -1;
		return;
	endif;
	[fst + 0] = -1;
	alias count R5;
	count = 0;
	alias pt R6;
	while(count < 16)do
		pt = PROCESS_TABLE + (count*16);
		if([pt + 4] == WAIT_FILE && [pt + 5] == R2)then
			[pt + 4] = READY;
		endif;
		count = count + 1;
	endwhile;
	R0 = 0;
	return;
endif;


//acquire semaphore
if(funcNum == ACQUIRE_SEMAPHORE)then
	alias count R3;
	count = 0;
	while(count < MAX_SEM_COUNT)do
		if([SEMAPHORE_TABLE + (count*4) + 1] == 0)then
			break;
		endif;
	count = count + 1;
	endwhile;
	if(count == MAX_SEM_COUNT)then
		R0 = -1;
		return;
	endif;
	[SEMAPHORE_TABLE + (count * 4) + 1] = 1;
	[SEMAPHORE_TABLE + (count * 4)] = -1;
	R0 = count;
	breakpoint;
	return;
endif;

//release semaphore
if(funcNum == RELEASE_SEMAPHORE)then
	alias sem R5;
	sem = SEMAPHORE_TABLE + (R2 * 4);
	if([sem] == R3)then
		[sem] = -1;
		alias count R4;
		count = 0;
		while(count < 16)do	
		if([PROCESS_TABLE + (count * 16) + 4] == WAIT_SEMAPHORE)then
			if([PROCESS_TABLE + (count * 16) + 5] == R2)then
				[PROCESS_TABLE + (count * 16) + 4] = READY;
			endif;
		endif;
		count = count + 1;
		endwhile;
	endif;
	[sem + 1] = [sem + 1] - 1; 
	R0 = 0;
	breakpoint;
	return;
endif;


//acquire disk
if(funcNum == ACQUIRE_DISK)then

while([DISK_STATUS_TABLE] == 1)do
	[PROCESS_TABLE + (currPid * 16) + 4] = WAIT_DISK;
	multipush(R1, R2);
	call MOD_5;
	multipop(R1, R2);
endwhile;


[DISK_STATUS_TABLE] = 1;
[DISK_STATUS_TABLE + 4] = currPid;

return;
endif;


//acquire terminal
if(funcNum == 8)then

while([TERMINAL_STATUS_TABLE] == 1)do  //busy-loop
	[PROCESS_TABLE + (currPid * 16) + 4] = WAIT_TERMINAL;
	multipush(R1, R2);
	call MOD_5;
	multipop(R1, R2);
endwhile;	

[TERMINAL_STATUS_TABLE] = 1;	
[TERMINAL_STATUS_TABLE + 1] = [SYSTEM_STATUS_TABLE + 1];

return;
endif;


//release terminal
if(funcNum == 9)then
if(currPid != [TERMINAL_STATUS_TABLE + 1])then
	R0 = -1;
	print "hi";
	breakpoint;
	return;
endif;

[TERMINAL_STATUS_TABLE] = 0;
alias iter R4;
iter = 0;
while(iter < 16)do
	if([PROCESS_TABLE + (iter * 16) + 4] == WAIT_TERMINAL)then
		[PROCESS_TABLE + (iter * 16) + 4] = READY;
	endif;
	iter = iter + 1;
endwhile;

R0 = 0;

return;
endif;
