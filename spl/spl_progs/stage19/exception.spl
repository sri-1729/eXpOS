[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = -1;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13] = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 11]*512 - 1;
backup;
multipush(EIP);

breakpoint;

if(EC != 0)then
	if(EC == 1)then
		print "Illegal Instruction";
	endif;
	if(EC == 2)then
		print "Illegal Memory Access";
	endif;
	if(EC == 3)then
		print "Arithmetic Exception";
	endif;
	R1 = EXIT_PROCESS;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	breakpoint;
	call MOD_1;
	call MOD_5;
endif;

if(EPN >= 4 && EPN <= 7)then
	R1 = GET_CODE_PAGE;
	R2 = [DISK_MAP_TABLE + ([SYSTEM_STATUS_TABLE + 1])*10 + EPN];
	call MOD_2;
	[PTBR + (EPN * 2)] = R0;
	[PTBR + (EPN*2) + 1] = "1100";
endif;

if(EPN >= 2 && EPN <=3)then
	R1 = GET_FREE_PAGE;
	call MOD_2;
	[PTBR + (2*2)] = R0;
	[PTBR + (2*2) + 1] = "1110";
	R1 = GET_FREE_PAGE;
	call MOD_2;
	[PTBR + (3*2)] = R0;
	[PTBR + (3*2) + 1] = "1110";
endif;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 0;
multipop(EIP);
restore;

SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13];
SP = SP + 1;
[[PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1] * 20 + (SP / 512)*2]*512 + (SP % 512)] = EIP;
breakpoint;
ireturn;


