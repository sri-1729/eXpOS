alias userSP R0;
userSP = SP;
alias currId R5;
currId = [SYSTEM_STATUS_TABLE + 1];

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 9;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11]*512 - 1;


alias location R1;
alias offset R2;
alias fileName R3;
location = [PTBR + 2 * ((userSP - 4) / 512)];

offset = (userSP - 4) % 512;
fileName = [(location * 512) + offset];

//search in inode table
alias iter R4;
iter = 0;
while(iter < MAX_FILE_NUM)do
	if([INODE_TABLE + (iter * 16) + 1] == fileName)then
		break;
	endif;
	iter = iter + 1;
endwhile;

if(iter == MAX_FILE_NUM || [INODE_TABLE + (iter * 16)] != EXEC)then
	[([PTBR + 2 * ((userSP - 1) / 512)]) * 512 + ((userSP - 1) % 512)] = -1;
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
	SP = userSP;
	ireturn;
endif;

multipush(R0, R1, R2, R3, R4, R5);
R1 = EXIT_PROCESS;
R2 = currId;
call MOD_1;
multipop(R0, R1, R2, R3, R4, R5);

R0 = [PROCESS_TABLE + (currId * 16) + 11];
[MEMORY_FREE_LIST + R0] = 1;

[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;

SP = R0*512 - 1;
[PROCESS_TABLE + (currId * 16) + 4] = RUNNING;
[PROCESS_TABLE + (currId * 16) + 7] = iter;

[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";

//get free page for heap
multipush(R0, R1, R2, R3, R4, R5);
R1 = GET_FREE_PAGE;
call MOD_2;
R6 = R0;
multipop(R0, R1, R2, R3, R4, R5);
[PTBR + 4] = R6;
[PTBR + 5] = "0110";

multipush(R0, R1, R2, R3, R4, R5);
R1 = GET_FREE_PAGE;
call MOD_2;
R6 = R0;
multipop(R0, R1, R2, R3, R4, R5);

[PTBR + 6] = R6;
[PTBR + 7] = "0110";

//get stack page

multipush(R0, R1, R2, R3, R4, R5);
R1 = GET_FREE_PAGE;
call MOD_2;
R6 = R0;
multipop(R0, R1, R2, R3, R4, R5);
multipush(R0, R1, R2, R3, R4, R5);
R1 = GET_FREE_PAGE;
call MOD_2;
R6 = R0;
multipop(R0, R1, R2, R3, R4, R5);
[PTBR + 16] = R6;
[PTBR + 17] = "0110";

multipush(R0, R1, R2, R3, R4, R5);
R1 = GET_FREE_PAGE;
call MOD_2;
R6 = R0;
multipop(R0, R1, R2, R3, R4, R5);
[PTBR + 18] = R6;
[PTBR + 19] = "0110";

R1 = 0;
while(R1 < 4)do
	if([INODE_TABLE + (iter * 16) + 8 + R1] != -1)then
		multipush(R0, R1, R2, R3, R4, R5);
		R1 = GET_FREE_PAGE;
		call MOD_2;
		R6 = R0;
		multipop(R0, R1, R2, R3, R4, R5);
		loadi(R6, [INODE_TABLE + (iter * 16) + 8 + R6]);
		[PTBR + (R1 + 4) * 2] = R6;
		[PTBR + (R1 + 4)*2 + 1] = "0100";
	else
		[PTBR + (R1 + 4) * 2] = -1;
		[PTBR + (R1 + 4)*2 + 1] = "0000";
	endif;
	R1 = R1 + 1;
endwhile;

[[PTBR + 16] * 512] = [[PTBR + 8] * 512 + 1];
SP = [PTBR + 16] * 512;
ireturn;


