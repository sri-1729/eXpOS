//MOD_4


alias funcNum R1;
alias currID R2;
alias page R3;
alias block R4;


//Disk Load
if(funcNum == DISK_LOAD)then
multipush(R1, R2, R3, R4);
R1 = ACQUIRE_DISK;
R2 = currID;
call MOD_0;
multipop(R1, R2, R3, R4);

[DISK_STATUS_TABLE] = 1;
[DISK_STATUS_TABLE + 1] = 0;
[DISK_STATUS_TABLE + 2] = page;
[DISK_STATUS_TABLE + 3] = block;
[DISK_STATUS_TABLE + 4] = currID;

load(page, block);

[PROCESS_TABLE + (currID * 16) + 4] = WAIT_DISK;

call MOD_5;

return;
endif;






//Terminal Write
if(funcNum == 3)then

multipush(R1, R2, R3);
R1 = 8;
R2 = [SYSTEM_STATUS_TABLE + 1];

call MOD_0;

multipop(R1, R2, R3);

print R3;

multipush(R1, R2, R3);
R1 = 9;
R2 = [SYSTEM_STATUS_TABLE + 1];

call MOD_0;

multipop(R1, R2, R3);

return;
endif;

//Terminal Read
if(funcNum == 4)then

multipush(R1, R2, R3);
R1 = 8;
R2 = [SYSTEM_STATUS_TABLE + 1];

call MOD_0;

multipop(R1, R2, R3);

read;

[PROCESS_TABLE + (currID * 16) + 4] = WAIT_TERMINAL;

multipush(R1, R2, R3);
call MOD_5;

multipop(R1, R2, R3);
[[[PROCESS_TABLE + (currID * 16) + 14] + (2 * (R3 / 512))]*512 + (R3 % 512)] = [PROCESS_TABLE + (currID * 16) + 8]; 

return;
endif;
